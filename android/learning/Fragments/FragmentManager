-   FragmentManager is responsible :
        -   for managing fragments
        -   for adding their views to the activity’s view hierarchy

-   FragmentManager handles two things :
        -   a list of fragments
        -   a back stack of fragment transactions

-   Fragment transactions :
        -   are used to add, remove, attach, detach, or replace fragments in the fragment list.
        -   They are the heart to use fragments to compose and recompose screens at runtime.
        -   The FragmentManager maintains a back stack of fragment transactions to navigate.

        FragmentManager.beginTransaction() method creates and returns an instance of FragmentTransaction.

            FragmentManager fm = getSupportFragmentManager();
            Fragment fragment = fm.findFragmentById(R.id.fragment_container);

            if (fragment == null) {
                fragment = new CrimeFragment();
                fm.beginTransaction()
                    .add(R.id.fragment_container, fragment)
                    .commit();
            }

            // add(…) method has two parameters:
                    -   a container view ID, resource ID of the layout that is defined in activity layout
                    -   fragment class

        A container view ID serves two purposes:
            -   It tells the FragmentManager where in the activity’s view the fragment’s view should appear.
            -   It is used as a unique identifier for a fragment in the FragmentManager’s list.

-----------------------------------------------
To host a UI fragment, an activity must:

    -   define a spot in its layout for the fragment’s view
    -   manage the lifecycle of the fragment instance

To add a fragment to an activity :

    -   XML
        create a spot in activity to contain fragment
        e.g
        <FrameLayout
            xmlns:android="http://schemas.android.com/apk/res/android"
            android:id="@+id/fragment_container"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />

    -   code

        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_crime);

            FragmentManager fm = getSupportFragmentManager();
            Fragment fragment = fm.findFragmentById(R.id.fragment_container);

            if (fragment == null) {
                fragment = new CrimeFragment();
                fm.beginTransaction()
                    .add(R.id.fragment_container, fragment)
                    .commit();
            }
        }

To replace a fragment :
    -   code

        // Create fragment and give it an argument specifying the article it should show
        ArticleFragment newFragment = new NewFragment();

        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();

        // Replace whatever is in the fragment_container view with this fragment,
        // and add the transaction to the back stack so the user can navigate back
        transaction.replace(R.id.fragment_container, newFragment);
        transaction.addToBackStack(null);

        transaction.commit();

    -   To allow the user to navigate backward through the fragment transactions
        you must call addToBackStack() before you commit the FragmentTransaction.
----------------------------------
// However, if we're being restored from a previous state,
// then we don't need to do anything and should return or else
// we could end up with overlapping fragments.

if (savedInstanceState != null) {
    return;
}
