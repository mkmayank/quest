hosts
    -   list of one or more groups or host patterns, separated by colons
        https://docs.ansible.com/ansible/latest/user_guide/intro_patterns.html

            - hosts: webservers
              remote_user: root

remote_user
     -  name of the user account
     -  Remote users can also be defined per task

            - hosts: webservers
              remote_user: root
              tasks:
                - name: test connection
                  ping:
                  remote_user: yourname

    - to become root

            - hosts: webservers
              remote_user: yourname
              become: yes

    - to become root for particular task

            - hosts: webservers
              remote_user: yourname
              tasks:
                - service:
                    name: nginx
                    state: started
                  become: yes
                  become_method: sudo


    - to become a user different than root:

              - hosts: webservers
                remote_user: yourname
                become: yes
                become_user: postgres

    - to use other privilege escalation methods, like su:

              - hosts: webservers
                remote_user: yourname
                become: yes
                become_method: su

order
    -   to control the order in which hosts are run

            - hosts: all
              order: sorted
              gather_facts: False
              tasks:
                - debug:
                    var: inventory_hostname

    -    possible values for order are:

        -   inventory:  default
        -   reverse_inventory:
        -   sorted:
        -   reverse_sorted:
        -   shuffle:

tasks
    -   Each play contains a list of tasks
    -   Tasks are executed in order, one at a time, against all machines matched by the host pattern, before moving on to the next task
    -   When running the playbook, which runs top to bottom, hosts with failed tasks are taken out of the rotation for the entire playbook
    -   goal of each task is to execute a module, with very specific argument
    -   Modules should be idempotent
    -   Every task should have a name

            tasks:
              - name: make sure apache is running
                service:
                  name: httpd
                  state: started

    -   The command and shell modules are the only modules that just take a list of arguments and don’t use the key=value form

            tasks:
              - name: enable selinux
                command: /sbin/setenforce 1

  -     The command and shell module care about return codes, so if you have a command whose successful exit code is not zero :

            tasks:
              - name: run this command and ignore the result
                shell: /usr/bin/somecommand || /bin/true

            or

            tasks:
              - name: run this command and ignore the result
                shell: /usr/bin/somecommand
                ignore_errors: True

   -    If the action line is getting too long for comfort you can break it on a space and indent any continuation lines:

            tasks:
              - name: Copy ansible inventory file to client
                copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts
                        owner=root group=root mode=0644

notify
    -   notify actions are triggered at the end of each block of tasks in a play, and will only be triggered once even if notified by multiple different tasks

            tasks:
              - name: template configuration file
                template:
                  src: template.j2
                  dest: /etc/foo.conf
                notify:
                  - restart memcached
                  - restart apache

handlers
    -   Handlers are lists of tasks, not really any different from regular tasks, that are referenced by a globally unique name, and are notified by notifiers
    -   If nothing notifies a handler, it will not run
    -   Regardless of how many tasks notify a handler, it will run only once, after all of the tasks complete in a particular play.

            handlers:
                - name: restart memcached
                  service:
                    name: memcached
                    state: restarted
                - name: restart apache
                  service:
                    name: apache
                    state: restarted

listen
    -   handlers can also “listen” to generic topics, and tasks can notify those topics as follows:

            handlers:
                - name: restart memcached
                  service:
                    name: memcached
                    state: restarted
                  listen: "restart web services"
                - name: restart apache
                  service:
                    name: apache
                    state:restarted
                  listen: "restart web services"

            tasks:
                - name: restart everything
                  command: echo "this task will restart the web services"
                  notify: "restart web services"

    -   Handler names and listen topics live in a global namespace

meta
    -   handlers notified within pre_tasks, tasks, and post_tasks sections are automatically flushed in the end of section where they were notified;
    -   handlers notified within roles section are automatically flushed in the end of tasks section, but before any tasks handlers.

    -   any queued up handlers would be processed early when the meta statement was reached
    -   to flush all the handler commands immediately :

            tasks:
               - shell: some tasks go here
               - meta: flush_handlers
               - shell: some other tasks
